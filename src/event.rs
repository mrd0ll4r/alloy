use crate::config::InputValue;
use serde::{Deserialize, Serialize};
use std::time::Duration;

#[derive(Serialize, Deserialize, Debug, Clone, Ord, PartialOrd, PartialEq, Eq)]
#[serde(tag = "type")]
pub enum ButtonEvent {
    /// The button was pressed.
    Down,

    /// The button was depressed.
    Up,

    /// The button was pressed and released.
    /// The duration indicates for how long the button was pressed.
    Clicked { duration: Duration },

    /// An event that is generated at one-second intervals after a button was initially pressed.
    LongPress { seconds: u64 },
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct AddressedEvent {
    pub address: u16,
    pub event: Event,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct Event {
    /// The time at which the event was generated, on the generating machine.
    pub timestamp: chrono::DateTime<chrono::Utc>,

    /// The actual event.
    pub inner: Result<EventKind, String>,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub enum EventKind {
    /// An event generated by buttons and other binary input devices.
    Button(ButtonEvent),

    /// A newly read or written value.
    Update { new_value: InputValue },
}
