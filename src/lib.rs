#![recursion_limit = "256"]

pub mod api;
pub mod config;
pub mod event;
pub mod http;
pub mod tcp;

#[macro_use]
extern crate failure;
#[macro_use]
extern crate log;

pub type Address = u16;
pub type Value = u16;

/// Maps a value from one range to another.
pub fn map_range(from_range: (f64, f64), to_range: (f64, f64), s: f64) -> f64 {
    to_range.0 + (s - from_range.0) * (to_range.1 - to_range.0) / (from_range.1 - from_range.0)
}

/// Maps a value from one range to a Value (16 bit unsigned integer).
pub fn map_to_value(from_range: (f64, f64), s: f64) -> Value {
    map_range(from_range, (LOW as f64, HIGH as f64), s) as Value
}

/// Maps a Value (16 bit unsigned integer) to another range.
pub fn map_from_value(to_range: (f64, f64), v: Value) -> f64 {
    map_range((LOW as f64, HIGH as f64), to_range, v as f64)
}

/// Maps a temperature between -40 and +80 degrees to a Value.
pub fn map_temperature_to_value(temp: f64) -> Value {
    map_to_value((-40_f64, 80_f64), temp)
}

/// Maps a Value back to a temperature between -40 and +80 degrees.
pub fn map_value_to_temperature(v: Value) -> f64 {
    map_from_value((-40_f64, 80_f64), v)
}

/// Maps relative humidity (0-100%) to a Value.
pub fn map_relative_humidity_to_value(humidity: f64) -> Value {
    map_to_value((0_f64, 100_f64), humidity)
}

/// Maps a Value to relative humidity (0-100%).
pub fn map_value_to_relative_humidity(v: Value) -> f64 {
    map_from_value((0_f64, 100_f64), v)
}

/// Value generated by _input_ devices on logic high.
pub const HIGH: Value = std::u16::MAX;
/// Value generated by _input_ devices on logic low.
pub const LOW: Value = std::u16::MIN;

#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
