pub mod api;
pub mod config;
pub mod event;

pub type Address = u16;
pub type Value = u16;

/// Maps a value from one range to another.
pub fn map_range(from_range: (f64, f64), to_range: (f64, f64), s: f64) -> f64 {
    to_range.0 + (s - from_range.0) * (to_range.1 - to_range.0) / (from_range.1 - from_range.0)
}

/// Maps a value from one range to a Value (16 bit unsigned integer).
pub fn map_to_value(from_range: (f64, f64), s: f64) -> Value {
    map_range(from_range, (std::u16::MIN as f64, std::u16::MAX as f64), s) as Value
}

/// Value generated by _input_ devices on logic high.
pub const HIGH: Value = std::u16::MAX;
// Value generated by _input_ devices on logic low.
pub const LOW: Value = std::u16::MIN;


#[cfg(test)]
mod tests {
    #[test]
    fn it_works() {
        assert_eq!(2 + 2, 4);
    }
}
